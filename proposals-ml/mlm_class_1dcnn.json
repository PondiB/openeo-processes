{
    "id": "mlm_class_1dcnn",
    "summary": "Initialize a 1D CNN classification model",
    "description": "Initializes a 1D Convolutional Neural Network (CNN) classification model. The number of input channels and output classes are inferred automatically from the training data at fit time. This component sets up the model structure but does not perform training or handle data splitting. The resulting model can be trained later using ``ml_fit``.",
    "categories": [
        "machine learning"
    ],
    "experimental": true,
    "parameters": [
        {
            "name": "conv_filters",
            "description": "List of integers specifying the number of filters in each convolutional layer. The final output layer for classification will be added automatically based on the number of classes in the training data.",
            "default": [64, 128, 256, 512],
            "schema": {
                "type": "array",
                "items": {
                    "type": "integer",
                    "minimum": 1
                },
                "minItems": 4,
                "maxItems": 4
            }
        },
        {
            "name": "conv_kernels",
            "description": "List of integers or 'global' for kernel size in each convolutional layer. The 4th conv uses a global kernel (covers the entire sequence at that layer). The final output layer for classification will use a 1x1 kernel and be added automatically.",
            "default": [3, 3, 3, "global"],
            "schema": {
                "type": "array",
                "items": {
                    "oneOf": [
                        {"type": "integer", "minimum": 1},
                        {"type": "string", "enum": ["global"]}
                    ]
                },
                "minItems": 4,
                "maxItems": 4
            }
        },
        {
            "name": "conv_strides",
            "description": "List of integers specifying the stride for each convolutional layer. The final output layer for classification will use stride 1 and be added automatically.",
            "default": [1, 1, 1, 1],
            "schema": {
                "type": "array",
                "items": {
                    "type": "integer",
                    "minimum": 1
                },
                "minItems": 4,
                "maxItems": 4
            }
        },
        {
            "name": "use_batchnorm",
            "description": "List of booleans specifying whether to use batch normalization after each convolutional layer. The final output layer will not use batch normalization.",
            "default": [true, true, true, false],
            "schema": {
                "type": "array",
                "items": {
                    "type": "boolean"
                },
                "minItems": 4,
                "maxItems": 4
            }
        },
        {
            "name": "activation",
            "description": "Activation function to use after each convolutional layer.",
            "default": "relu",
            "schema": {
                "type": "string",
                "enum": ["relu", "tanh", "sigmoid", "leakyrelu"]
            }
        },
        {
            "name": "maxpool_sizes",
            "description": "List of integers specifying the pool size for each max pooling layer (after each of the first 3 conv blocks).",
            "default": [2, 2, 2],
            "schema": {
                "type": "array",
                "items": {
                    "type": "integer",
                    "minimum": 1
                },
                "minItems": 3,
                "maxItems": 3
            }
        },
        {
            "name": "maxpool_strides",
            "description": "List of integers specifying the stride for each max pooling layer.",
            "default": [2, 2, 2],
            "schema": {
                "type": "array",
                "items": {
                    "type": "integer",
                    "minimum": 1
                },
                "minItems": 3,
                "maxItems": 3
            }
        },
        {
            "name": "epochs",
            "description": "Number of training epochs.",
            "optional": true,
            "default": 100,
            "schema": {
                "type": "integer",
                "minimum": 1
            }
        },
        {
            "name": "batch_size",
            "description": "Size of the training batches.",
            "optional": true,
            "default": 64,
            "schema": {
                "type": "integer",
                "minimum": 1
            }
        },
        {
            "name": "optimizer",
            "description": "The optimizer to use for training.",
            "optional": true,
            "default": "adam",
            "schema": {
                "type": "string",
                "enum": [
                    "adam",
                    "sgd",
                    "rmsprop",
                    "adagrad",
                    "nadam"
                ]
            }
        },
        {
            "name": "learning_rate",
            "description": "The learning rate for the optimizer.",
            "optional": true,
            "default": 0.001,
            "schema": {
                "type": "number",
                "minimum": 0
            }
        },
        {
            "name": "seed",
            "description": "A randomization seed to use for reproducibility. If not given or `null`, no seed is used and results may differ on subsequent use.",
            "optional": true,
            "default": null,
            "schema": {
                "type": [
                    "integer",
                    "null"
                ]
            }
        }
    ],
    "returns": {
        "description": "A model object that can be trained using ``ml_fit``.",
        "schema": {
            "type": "object",
            "subtype": "ml-model"
        }
    },
    "links": [
        {
            "href": "https://ieeexplore.ieee.org/document/8921180",
            "title": "Song et al. (2019): Land Cover Classification for Satellite Images Through 1D CNN",
            "type": "text/html",
            "rel": "about"
        }
    ]
} 